package com.cultivapp.cultivapp.auth;

import jakarta.persistence.*;
import lombok.*;

/**
 * User Entity - Database Model for CultivApp Users (REQ-001: Login Authentication)
 * 
 * This JPA entity represents a user in the CultivApp system. It is mapped to the "users" 
 * table in the database and contains all necessary information for authentication and 
 * authorization.
 * 
 * Security Features:
 * - Passwords are NEVER stored in plain text. Only BCrypt hashed passwords are persisted.
 * - Email serves as the unique identifier (username) for login.
 * - The 'enabled' flag allows administrators to disable accounts without deletion.
 * 
 * Role-Based Access Control (RBAC):
 * - Each user has exactly one role (ADMIN or PRODUCTOR).
 * - The role determines what features and data the user can access after login.
 * 
 * Lombok Annotations:
 * - @Getter/@Setter: Auto-generates getters and setters for all fields.
 * - @NoArgsConstructor: Creates a no-argument constructor (required by JPA).
 * - @AllArgsConstructor: Creates a constructor with all fields.
 * - @Builder: Implements the Builder pattern for easy object creation.
 * 
 * @author CultivApp Team
 * @version 1.0 (REQ-001)
 */
@Entity // Marks this class as a JPA entity (database table mapping)
@Table(name="users") // Specifies the table name in the database
@Getter @Setter // Lombok: Auto-generates getters and setters
@NoArgsConstructor // Lombok: Creates empty constructor (required by JPA)
@AllArgsConstructor // Lombok: Creates constructor with all fields
@Builder // Lombok: Enables builder pattern for object creation
public class User {
    
    /**
     * Primary key - Unique identifier for each user.
     * Auto-generated by the database using an identity/sequence strategy.
     */
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * User's email address - Used as the login username.
     * Must be unique across all users and cannot be null.
     * This field is validated during login in REQ-001.
     */
    @Column(nullable=false, unique=true)
    private String email;

    /**
     * BCrypt hashed password - NEVER stores plain text passwords.
     * The hash is generated using BCryptPasswordEncoder during user creation.
     * During login (REQ-001), the provided plain password is compared against this hash.
     * 
     * Security: BCrypt is a one-way hash function with built-in salt, making it
     * resistant to rainbow table attacks and ensuring password security.
     */
    @Column(nullable=false)
    private String passwordHash;

    /**
     * User's role for Role-Based Access Control (RBAC).
     * Stored as a STRING in the database (e.g., "ADMIN" or "PRODUCTOR").
     * This role is included in the JWT token after successful login and determines
     * which features and data the user can access.
     */
    @Enumerated(EnumType.STRING)
    @Column(nullable=false)
    private Role role;

    /**
     * Account enabled flag - Controls whether the user can log in.
     * If false, login attempts will be rejected even with correct credentials.
     * This allows administrators to temporarily disable accounts without deleting them.
     * 
     * REQ-001: During login, this flag is checked before generating a JWT token.
     */
    @Column(nullable=false)
    private boolean enabled;
}
